import { Product, Order, OrderItemInput, ShippingAddress } from '../types'; // Assuming Order, OrderItemInput, ShippingAddress are defined in types

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/api'; // Use environment variable, fallback to /api

export const fetchProducts = async (): Promise<Product[]> => {
  const response = await fetch(`${API_BASE_URL}/products`);
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ message: 'Network response was not ok' }));
    throw new Error(errorData.message || 'Failed to fetch products');
  }
  return response.json();
};

export const fetchProductById = async (id: string): Promise<Product> => {
  const response = await fetch(`${API_BASE_URL}/products/${id}`);
  if (!response.ok) {
    if (response.status === 404) {
      throw new Error('Product not found');
    }
    const errorData = await response.json().catch(() => ({ message: 'Network response was not ok' }));
    throw new Error(errorData.message || `Failed to fetch product with id ${id}`);
  }
  return response.json();
};

// Add other API functions as needed (create, update, delete)

// Type for product data when creating (id, created_at, updated_at are generated by backend)
export type ProductCreationPayload = Omit<Product, 'id' | 'created_at' | 'updated_at'>;

export const createProduct = async (productData: ProductCreationPayload, token: string): Promise<Product> => {
  const response = await fetch(`${API_BASE_URL}/products`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`, // Added Authorization header
    },
    body: JSON.stringify(productData),
  });
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ message: 'Network response was not ok' }));
    throw new Error(errorData.message || 'Failed to create product');
  }
  return response.json();
};

export interface OrderPayload {
  items: Array<OrderItemInput>; // e.g., { product_id: string; quantity: number }[]
  shipping_address: ShippingAddress; // e.g., { street: string; city: string; postal_code: string; country: string; full_name: string; phone?: string; }
  billing_address?: ShippingAddress;
  customer_email?: string; // Added for Polar customer email
}

export interface CreateOrderResponse extends Order { // Assuming Order type includes id, items, total_amount, etc.
  checkoutUrl: string;
}

export const createOrderAndInitiateCheckout = async (payload: OrderPayload): Promise<CreateOrderResponse> => {
  const response = await fetch(`${API_BASE_URL}/orders`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      // Include Authorization header if your endpoint is protected
      // 'Authorization': `Bearer ${your_auth_token}`,
    },
    body: JSON.stringify(payload),
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ message: 'Failed to create order. Network response was not ok.' }));
    throw new Error(errorData.message || 'Failed to create order and initiate checkout.');
  }
  return response.json();
};
